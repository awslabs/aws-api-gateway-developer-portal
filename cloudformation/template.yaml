---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: My Dev Portal Stack
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        # There's circular dependencies between the API + backend lambda and API + IAM execution role for
        # that won't get fixed anytime remotely soon.
        - E3004
        # Not useful at all.
        - I1022

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Dev Portal Content Configuration"
        Parameters:
          - ArtifactsS3BucketName
          - DevPortalSiteS3BucketName
          - StaticAssetRebuildToken
          - StaticAssetRebuildMode
      -
        Label:
          default: "Dev Portal Customer Configuration"
        Parameters:
          - CognitoIdentityPoolName
          - DevPortalCustomersTableName
          - AccountRegistrationMode
      # Marketplace support is currently broken
      # -
      #   Label:
      #     default: "Subscription Notification Configuration"
      #   Parameters:
      #     - MarketplaceSubscriptionTopicProductCode
      -
        Label:
          default: "Custom Domain Configuration"
        Parameters:
          - CustomDomainName
          - CustomDomainNameAcmCertArn
          - UseRoute53Nameservers
          - CognitoDomainNameOrPrefix
          # - CognitoDomainAcmCertArn
      -
        Label:
          default: "Dev Portal Customer Feedback Configuration"
        Parameters:
          - DevPortalAdminEmail
          - DevPortalFeedbackTableName

Parameters:
  ArtifactsS3BucketName:
    Type: String
    Description: The S3 bucket in which the Open API documents are stored. Bucket
      names are globally unique, so you must change this.

  DevPortalSiteS3BucketName:
    Type: String
    Description: The S3 bucket in which the web application code is stored. Bucket
      names are globally unique, so you must change this.

  DevPortalCustomersTableName:
    Type: String
    Description: The name of the DynamoDB Customers table.
    Default: 'DevPortalCustomers'

  DevPortalPreLoginAccountsTableName:
    Type: String
    Description: The name of the DynamoDB PreLoginAccounts table.
    Default: 'DevPortalPreLoginAccounts'

  DevPortalAdminEmail:
    Type: String
    Description: The email address where user submitted feedback notifications get sent.
    Default: ''

  DevPortalFeedbackTableName:
    Type: String
    Description: The name of the DynamoDB table storing feedback submitted by users.
    Default: 'DevPortalFeedback'

  StaticAssetRebuildToken:
    Type: String
    Description: Provide a token different from the last deployment's token to re-upload the dev portal site's static assets. You can provide a timestamp or GUID on each deployment to always re-upload the assets.
    Default: 'defaultRebuildToken'

  EdgeLambdaRebuildToken:
    Type: String
    Description: Provide a token different from the last deployment's token to update the edge lambda. You can provide a timestamp or GUID on each deployment to always update it.
    Default: 'defaultRebuildToken'

  StaticAssetRebuildMode:
    Type: String
    Description: By default, a static asset rebuild doesn't overwrite custom-content. Provide the value `overwrite-content` to replace the custom-content with your local version. Don't do this unless you know what you're doing -- all custom changes in your s3 bucket will be lost. 
    Default: ''
    AllowedValues:
      - 'overwrite-content'
      - ''
    ConstraintDescription: Malformed input - Parameter StaticAssetRebuildMode value must be either 'overwrite-content' or left blank.

  # Marketplace support is currently broken
  # MarketplaceSubscriptionTopicProductCode:
  #   Type: String
  #   Description: The marketplace SNS topic suffix for subscription/unsubscription events
  #   Default: DevPortalMarketplaceSubscriptionTopic

  CognitoIdentityPoolName:
    Type: String
    Description: The name for your Cognito Identity Pool.
    Default: 'DevPortalIdentityPool'

  CognitoDomainNameOrPrefix:
    Type: String
    Description: The Domain Name (or Prefix) at which your Cognito Hosted UI is located. This should be regionally unique.

  # CognitoDomainAcmCertArn:
  #   Type: String
  #   Description: Doesn't yet do anything. Oh well.
  #   Default: ''

  CustomDomainName:
    Type: String
    Description: Optionally provide a custom domain name associated with an ACM cert to create a developer portal at that domain name (provide with the format foo.bar.net). Leave blank to create a developer portal without a custom domain name. Standing up a developer portal stack with a custom domain name will take significantly longer than without.
    Default: ''

  CustomDomainNameAcmCertArn:
    Type: String
    Description: If you provided a domain name associated with an acm cert, then you must also specify here the acm cert's arn. Leave this blank to create a developer portal without a custom domain name.
    Default: ''

  UseRoute53Nameservers:
    Type: String
    Description: Only applicable if creating a custom domain name for your dev portal. Defaults to false, and you'll need to provide your own nameserver hosting. If set to true, a Route53 HostedZone and RecordSet are created for you.
    Default: 'false'
    AllowedValues: 
      - 'false'
      - 'true'
    ConstraintDescription: Malformed input - Parameter UseRoute53Nameservers value must be either 'true' or 'false'

  DevelopmentMode:
    Type: String
    Description: Enabling this weakens security features (OAI, SSL, site S3 bucket with public read ACLs, Cognito callback verification, CORS, etc.) for easier development. It also breaks frontend routing (except to /index.html), including deep linking and page refresh. Do not enable this in production! Additionally, do not update a stack that was previously in development mode to be a production stack; instead, make a new stack that has never been in development mode.
    Default: 'false'
    AllowedValues: 
      - 'false'
      - 'true'
    ConstraintDescription: Malformed input - Parameter DevelopmentMode value must be either 'true' or 'false'

  LocalDevelopmentMode:
    Type: String
    Description: Enabling this disables CORS for easier local development. Do not enable this in production! Additionally, do not update a stack that was previously in development mode to be a production stack; instead, make a new stack that has never been in development mode.
    Default: 'false'
    AllowedValues: 
      - 'false'
      - 'true'
    ConstraintDescription: Malformed input - Parameter LocalDevelopmentMode value must be either 'true' or 'false'
  
  AccountRegistrationMode:
    Type: String
    # Description: Methods allowed for account registration. In 'open' mode, any user may register for an account. In 'request' mode, any user may request an account, but an Admin must approve the request in order for the account to perform any privileged actions (like subscribing to an API). In 'invite' mode, users cannot register or request an account; instead, an Admin must send an invite for the user to accept.
    Description: Methods allowed for account registration. In 'open' mode, any user may register for an account. In 'invite' mode, users cannot register or request an account; instead, an Admin must send an invite for the user to accept.
    Default: 'open'
    AllowedValues:
      - 'open'
      # - 'request'
      - 'invite'

Conditions:
  UseCustomDomainName: !And [!And [!Not [!Equals [!Ref CustomDomainName, '']], !Not [!Equals [!Ref CustomDomainNameAcmCertArn, '']]], !Condition NotDevelopmentMode]
  NoCustomDomainName: !And [!Not [ !Condition UseCustomDomainName ], !Condition NotDevelopmentMode]
  UseRoute53: !And [!Equals [!Ref UseRoute53Nameservers, 'true'], !Condition UseCustomDomainName]
  EnableFeedbackSubmission: !Not [!Equals [!Ref DevPortalAdminEmail, '']]
  LocalDevelopmentMode: !Or [!Equals [!Ref DevelopmentMode, 'true'], !Equals [!Ref LocalDevelopmentMode, 'true']]
  DevelopmentMode: !Equals [!Ref DevelopmentMode, 'true']
  NotDevelopmentMode: !Not [!Condition DevelopmentMode]
  InUSEastOne: !Equals [!Ref 'AWS::Region', 'us-east-1']
  InviteAccountRegistrationMode: !Equals [!Ref AccountRegistrationMode, 'invite']

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Join ['', [!Ref 'AWS::StackName', '-backend-api']]
          version: 2016-09-02T22:37:24Z
        basePath: /prod
        schemes:
        - https
        paths:
          # Version marker - please don't delete (this is how we track version usage)
          /version/{v4_1_1}:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /:
            x-amazon-apigateway-any-method:
              security:
              - sigv4: []
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /register:
            post:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          # Marketplace support is currently broken
          # /marketplace-confirm/{usagePlanId}:
          #   post:
          #     security:
          #     - sigv4: []
          #     produces:
          #     - application/json
          #     responses: {}
          #     x-amazon-apigateway-integration:
          #       uri: !Join
          #         - ''
          #         - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
          #           - :${stageVariables.DevPortalFunctionName}/invocations
          #       httpMethod: POST
          #       type: aws_proxy
          #   options:
          #     consumes:
          #     - application/json
          #     produces:
          #     - application/json
          #     responses:
          #       '200':
          #         description: 200 response
          #         schema:
          #           $ref: "#/definitions/Empty"
          #         headers:
          #           Access-Control-Allow-Origin:
          #             type: string
          #           Access-Control-Allow-Methods:
          #             type: string
          #           Access-Control-Allow-Headers:
          #             type: string
          #     x-amazon-apigateway-integration:
          #       responses:
          #         default:
          #           statusCode: 200
          #           responseParameters:
          #             method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
          #             method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          #             method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
          #               'UseCustomDomainName',
          #               !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
          #               !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
          #             ]]
          #       passthroughBehavior: when_no_match
          #       requestTemplates:
          #         application/json: "{\"statusCode\": 200}"
          #       type: mock
          /catalog:
            get:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /feedback:
            get:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            post:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            delete:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /admin/catalog/visibility:
            get:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            post:
              security:
              - sigv4: []
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /{proxy+}:
            x-amazon-apigateway-any-method:
              security:
              - sigv4: []
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [ 'LocalDevelopmentMode', "'*'", !If [
                        'UseCustomDomainName',
                        !Join ['', [ "'https://", !Ref CustomDomainName, "'" ]],
                        !Join ['', [ "'https://", !GetAtt DefaultCloudfrontDistribution.DomainName, "'" ]]
                      ]]
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
        definitions:
          Empty:
            type: object
            title: Empty Schema

      StageName: prod
      Variables:
        DevPortalFunctionName: !Ref DevPortalLambdaFunction

  DevPortalSiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DevPortalSiteS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DevPortalSiteS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: 'NotDevelopmentMode'
    Properties:
      Bucket: !Ref DevPortalSiteS3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DevPortalSiteS3Bucket}/*'
            Principal:
              AWS: !Sub >-
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOriginAccessIdentity}

  ArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactsS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt CatalogUpdaterLambdaFunction.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: "catalog/"
          -
            Function: !GetAtt CatalogUpdaterLambdaFunction.Arn
            Event: "s3:ObjectRemoved:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: "catalog/"

  CustomersTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Ref DevPortalCustomersTableName
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      # Marketplace support is currently broken
      # - AttributeName: MarketplaceCustomerId
      #   AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      # Marketplace support is currently broken
      # GlobalSecondaryIndexes:
      # - IndexName: MarketplaceCustomerIdIndex
      #   KeySchema:
      #   - AttributeName: MarketplaceCustomerId
      #     KeyType: HASH
      #   Projection:
      #     NonKeyAttributes:
      #     - ApiKeyId
      #     ProjectionType: INCLUDE
      #   ProvisionedThroughput:
      #     ReadCapacityUnits: 5
      #     WriteCapacityUnits: 5

  PreLoginAccountsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Ref DevPortalPreLoginAccountsTableName
      AttributeDefinitions:
      - AttributeName: UserId
        AttributeType: S
      KeySchema:
      - AttributeName: UserId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Condition: EnableFeedbackSubmission
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Ref DevPortalFeedbackTableName
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
      - IndexName: FeedbackIdIndex
        KeySchema:
        - AttributeName: Id
          KeyType: HASH
        Projection:
          ProjectionType: KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  FeedbackSubmittedSNSTopic:
    Type: AWS::SNS::Topic
    Condition: EnableFeedbackSubmission
    Properties:
      Subscription:
      - Endpoint: !Ref DevPortalAdminEmail
        Protocol: email

  BackendLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - apigateway:*
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - apigateway:GET
            Resource: !Join
              - ''
              - - 'arn:aws:apigateway:'
                - !Ref 'AWS::Region'
                - '::/restapis/'
                - !Ref ApiGatewayApi
                - '/*/exports/*'
          # Marketplace support is currently broken
          # - Effect: Allow
          #   Action:
          #   - aws-marketplace:ResolveCustomer
          #   Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/
                - !Ref CustomersTable
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: !GetAtt PreLoginAccountsTable.Arn
          # Marketplace support is currently broken
          # - Effect: Allow
          #   Action:
          #   - dynamodb:Query
          #   Resource: !Join
          #     - ''
          #     - - 'arn:aws:dynamodb:'
          #       - !Ref 'AWS::Region'
          #       - ':'
          #       - !Ref 'AWS::AccountId'
          #       - :table/
          #       - !Ref CustomersTable
          #       - /index/MarketplaceCustomerIdIndex
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt CatalogUpdaterLambdaFunction.Arn
          - !If
            - EnableFeedbackSubmission
            - Effect: Allow
              Action:
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              Resource: !Join
                - ''
                - - 'arn:aws:dynamodb:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :table/
                  - !Ref FeedbackTable
            - !Ref 'AWS::NoValue'
          - !If
            - EnableFeedbackSubmission
            - Effect: Allow
              Action:
              - sns:Publish
              Resource: !Ref FeedbackSubmittedSNSTopic
            - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:ListUsersInGroup
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminDeleteUser
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminListGroupsForUser
            Resource: !GetAtt CognitoUserPool.Arn

  CognitoPreSignupTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  CognitoPostConfirmationTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt PreLoginAccountsTable.Arn
          - Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
            Resource: !GetAtt CognitoUserPool.Arn

  CognitoPostAuthenticationTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:PutItem
            Resource: !GetAtt CustomersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource: !GetAtt PreLoginAccountsTable.Arn
          - Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
            Resource: !GetAtt CognitoUserPool.Arn

  CatalogUpdaterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: 
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ArtifactsS3BucketName
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DevPortalSiteS3BucketName
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action: # scope this down
            - apigateway:*
            Resource: '*'

  AssetUploaderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:PutObjectAcl
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
          - Effect: Allow
            Action:
            - s3:DeleteObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:DeleteObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'

  # Marketplace support is currently broken
  # ApiGatewayMarketplaceMeteringRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Join
  #       - ''
  #       - - !Ref AWS::StackName
  #         - 'MeteringRole'
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: Allow
  #         Principal:
  #           Service: apigateway.amazonaws.com
  #         Action: sts:AssumeRole
  #     Policies:
  #     - PolicyName: ApiGatewayMeteringPolicy
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Action:
  #           - aws-marketplace:BatchMeterUsage
  #           - aws-marketplace:ResolveCustomer
  #           Effect: Allow
  #           Resource: '*'

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DevPortalLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayApi
          - '/*/*'

  CognitoPreSignupTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPreSignupTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  CognitoPostConfirmationTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostConfirmationTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  CognitoPostAuthenticationTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostAuthenticationTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  # Marketplace support is currently broken
  # LambdaSNSExecutionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Join
  #       - ''
  #       - - 'arn:aws:sns:us-east-1:287250355862:aws-mp-subscription-notification-'
  #         - !Ref MarketplaceSubscriptionTopicProductCode
  #
  # LambdaSNSExecutionTestPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Join
  #       - ''
  #       - - 'arn:aws:sns:'
  #         - !Ref 'AWS::Region'
  #         - ':'
  #         - !Ref 'AWS::AccountId'
  #         - ':marketplace-test-topic'

  LambdaCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: 'Common code used by lambdas'
      ContentUri: ../lambdas/common-layer/
      CompatibleRuntimes:
        - nodejs16.x

  DevPortalLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/backend
      Handler: index.handler
      MemorySize: 1024
      Role: !GetAtt BackendLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: production
          WEBSITE_BUCKET_NAME: !Ref DevPortalSiteS3BucketName
          StaticBucketName: !Ref ArtifactsS3BucketName
          CustomersTableName: !Ref DevPortalCustomersTableName
          PreLoginAccountsTableName: !Ref DevPortalPreLoginAccountsTableName
          CatalogUpdaterFunctionArn: !GetAtt CatalogUpdaterLambdaFunction.Arn
          FeedbackTableName: !Ref DevPortalFeedbackTableName
          FeedbackSnsTopicArn:
            !If [EnableFeedbackSubmission, !Ref FeedbackSubmittedSNSTopic, '']
          UserPoolId: !Ref CognitoUserPool
          AdminsGroupName: !Join ['', [!Ref 'AWS::StackName', 'AdminsGroup']]
          RegisteredGroupName: !Sub '${AWS::StackName}-RegisteredGroup'
          DevelopmentMode: !Ref DevelopmentMode
          SourceAccount: !Ref AWS::AccountId
      # Adds the API as a trigger
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
      Layers:
        - !Ref LambdaCommonLayer

  # Marketplace support is currently broken
  # SubscriptionListenerLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ../lambdas/listener
  #     Handler: index.handler
  #     MemorySize: 128
  #     Role: !GetAtt BackendLambdaExecutionRole.Arn
  #     Runtime: nodejs16.x
  #     Timeout: 30
  #     Layers:
  #       - !Ref LambdaCommonLayer

  CognitoPreSignupTriggerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CognitoPreSignupTriggerFn'
      CodeUri: ../lambdas/cognito-pre-signup-trigger
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoPreSignupTriggerExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 3
      Environment:
        Variables:
          AccountRegistrationMode: !Ref AccountRegistrationMode
      Layers:
        - !Ref LambdaCommonLayer

  CognitoPostConfirmationTriggerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CognitoPostConfirmationTriggerFn'
      CodeUri: ../lambdas/cognito-post-confirmation-trigger
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoPostConfirmationTriggerExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 3
      Environment:
        Variables:
          AccountRegistrationMode: !Ref AccountRegistrationMode
          PreLoginAccountsTableName: !Ref DevPortalPreLoginAccountsTableName
          RegisteredGroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Layers:
        - !Ref LambdaCommonLayer

  CognitoPostAuthenticationTriggerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CognitoPostAuthenticationTriggerFn'
      CodeUri: ../lambdas/cognito-post-authentication-trigger
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoPostAuthenticationTriggerExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 3
      Environment:
        Variables:
          CustomersTableName: !Ref DevPortalCustomersTableName
          PreLoginAccountsTableName: !Ref DevPortalPreLoginAccountsTableName
          RegisteredGroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Layers:
        - !Ref LambdaCommonLayer

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !Ref CognitoIdentityPoolName
      # Lambda trigger caveats:
      #
      # - We can't use the functions' ARNs here, because there would be a
      #   circular dependency: some functions reference either the UserPool or
      #   UserPoolGroups within it.
      #
      # - You must declare an AWS::Lambda::Permission for each lambda here, or
      #   else calls from Cognito will fail with an AccessDeniedException. See
      #   `CognitoPreSignupTriggerFnExecutionPermission` as an example. More
      #   reading: <https://stackoverflow.com/a/42460847> and
      #   <https://forums.aws.amazon.com/thread.jspa?messageID=748566#748566>
      LambdaConfig:
        PreSignUp: !Join
          - ''
          - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
            - !Sub '${AWS::StackName}-CognitoPreSignupTriggerFn'
        PostConfirmation: !Join
          - ''
          - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
            - !Sub '${AWS::StackName}-CognitoPostConfirmationTriggerFn'
        PostAuthentication: !Join
          - ''
          - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
            - !Sub '${AWS::StackName}-CognitoPostAuthenticationTriggerFn'
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !If [
          InviteAccountRegistrationMode, true, false,
        ]
        InviteMessageTemplate:
          EmailSubject: 'Developer Portal - Invitation'
          EmailMessage: !Join [ '', [
            '<h2>Developer Portal</h2><p>You have been invited to access the developer portal at <a href="',
            !If [ 'DevelopmentMode',
              !Join [ '', [ 'https://', !GetAtt DevPortalSiteS3Bucket.RegionalDomainName, '/index.html' ]],
              !If [
                'UseCustomDomainName',
                !Join [ '', [ 'https://', !Ref CustomDomainName ]],
                !Join [ '', [ 'https://', !GetAtt DefaultCloudfrontDistribution.DomainName ]]
              ]
            ],
            '">',
            !If [ 'DevelopmentMode',
              !Join [ '', [ 'https://', !GetAtt DevPortalSiteS3Bucket.RegionalDomainName, '/index.html' ]],
              !If [
                'UseCustomDomainName',
                !Join [ '', [ 'https://', !Ref CustomDomainName ]],
                !Join [ '', [ 'https://', !GetAtt DefaultCloudfrontDistribution.DomainName ]]
              ]
            ],
            '</a>.</p><p><b>Username:</b> {username}<br><b>Temporary password:</b> {####}</p>'
          ] ]
      AutoVerifiedAttributes: ['email']
      UsernameAttributes: ['email']
      EmailVerificationSubject: 'Developer Portal - Verification Code'
      EmailVerificationMessage: '<h2>Developer Portal</h2><p>Your verification code is <b>{####}</b></p>'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    # It's really unintuitive, but changing any of the properties here will cause stack updates to deploy non-functionally.
    # The CognitoUserPoolClientSettings custom resource runs after this resource and adds a bunch of fields.
    # However, when this is updated and changes, the CUPCS custom resource doesn't re-run, and so a bunch of vital
    # settings won't be set, e.g., CallbackURL.
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoIdentityPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED

  CognitoUserPoolClientSettingsBackingFnRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'

  CognitoUserPoolClientSettingsBackingFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      MemorySize: 128
      Timeout: 300
      CodeUri: ../lambdas/cfn-cognito-user-pools-client-settings
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolClientSettingsBackingFnRole.Arn
      Layers:
        - !Ref LambdaCommonLayer

  CognitoUserPoolClientSettings:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Timeout: 360
      ServiceToken: !GetAtt CognitoUserPoolClientSettingsBackingFn.Arn
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      SupportedIdentityProviders: [ "COGNITO" ] # should (eventually) allow people to add values
      CallbackURL: !If [ LocalDevelopmentMode,
        [
          'http://localhost:3000/index.html?action=login',
          !Join [ '', [ 'https://', !GetAtt DevPortalSiteS3Bucket.RegionalDomainName, '/index.html?action=login' ]],
          !Join [ '', [ 'https://', !If [ NoCustomDomainName, !GetAtt DefaultCloudfrontDistribution.DomainName, !Ref CustomDomainName ], '/index.html?action=login' ]]
        ],
        [
          !Join [ '', [ 'https://', !If [ NoCustomDomainName, !GetAtt DefaultCloudfrontDistribution.DomainName, !Ref CustomDomainName ], '/index.html?action=login' ]]
        ]
      ]
      LogoutURL: !If [ LocalDevelopmentMode,
        [
          'http://localhost:3000/index.html?action=logout',
          !Join [ '', [ 'https://', !GetAtt DevPortalSiteS3Bucket.RegionalDomainName, '/index.html?action=logout' ]],
          !Join [ '', [ 'https://', !If [ NoCustomDomainName, !GetAtt DefaultCloudfrontDistribution.DomainName, !Ref CustomDomainName ], '/index.html?action=logout' ]],
        ],
        [
          !Join [ '', [ 'https://', !If [ NoCustomDomainName, !GetAtt DefaultCloudfrontDistribution.DomainName, !Ref CustomDomainName ], '/index.html?action=logout' ]],
        ]
      ]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [ "implicit" ]
      AllowedOAuthScopes: [ "openid" ]

  CognitoUserPoolDomainBackingFnRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'

  CognitoUserPoolDomainBackingFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      MemorySize: 128
      Timeout: 300
      CodeUri: ../lambdas/cfn-cognito-user-pools-domain
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolDomainBackingFnRole.Arn
      Layers:
        - !Ref LambdaCommonLayer

  CognitoUserPoolDomain:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Timeout: 360
      ServiceToken: !GetAtt CognitoUserPoolDomainBackingFn.Arn
      UserPoolId: !Ref CognitoUserPool
      Domain: !Ref CognitoDomainNameOrPrefix
  
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref CognitoIdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Join
            - ''
            - - cognito-idp.
              - !Ref 'AWS::Region'
              - .amazonaws.com/
              - !Ref CognitoUserPool

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  # Every logged-in Cognito user is "authenticated".
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAuthenticatedRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':'
                - !Ref ApiGatewayApi
                - /prod/*/signin
      Path: '/'

  # A logged-in Cognito user, who is not in a "pending" (invite or request)
  # state, is "registered".
  CognitoRegisteredRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoRegisteredRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/prod/*'
          - Effect: Deny
            Action:
            - execute-api:Invoke
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/prod/*/admin/*'
      Path: '/'

  CognitoAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAdminRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':'
                - !Ref ApiGatewayApi
                - /prod/*/*

  CognitoAdminsGroup:
    Type: AWS::Cognito::UserPoolGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: 'Admin users of the developer portal'
      GroupName: !Join ['', [!Ref 'AWS::StackName', 'AdminsGroup']]
      # the role we assume is the role associated with the lowest-precedence users group
      # since admin group has a precedence of 0, it takes priority
      Precedence: 0
      RoleArn: !GetAtt CognitoAdminRole.Arn
      UserPoolId: !Ref CognitoUserPool

  CognitoRegisteredGroup:
    Type: AWS::Cognito::UserPoolGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: 'Registered users in the developer portal'
      GroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Precedence: 1
      RoleArn: !GetAtt CognitoRegisteredRole.Arn
      UserPoolId: !Ref CognitoUserPool

  CatalogUpdaterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/catalog-updater
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CatalogUpdaterLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 20
      Environment:
        Variables:
          BucketName: !Ref ArtifactsS3BucketName
          SourceAccount: !Ref AWS::AccountId
      Layers:
        - !Ref LambdaCommonLayer

  CatalogUpdaterLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt CatalogUpdaterLambdaFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      #SourceArn: !GetAtt MyBucket.Arn

  StaticAssetUploaderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/static-asset-uploader
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt AssetUploaderLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 300
      Environment:
        Variables:
          StaticBucketName: !Ref ArtifactsS3BucketName
          SourceAccount: !Ref AWS::AccountId
      Layers:
        - !Ref LambdaCommonLayer

  StaticAssetUploader:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: ArtifactsS3Bucket
    Properties:
      ServiceToken: !GetAtt StaticAssetUploaderLambdaFunction.Arn
      BucketName: !Ref DevPortalSiteS3Bucket
      RestApiId: !Ref ApiGatewayApi
      Region: !Ref 'AWS::Region'
      IdentityPoolId: !Ref CognitoIdentityPool
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      UserPoolDomain: !GetAtt CognitoUserPoolDomain.FullUrl
      # Marketplace support is currently broken
      # MarketplaceSuffix: !Ref MarketplaceSubscriptionTopicProductCode
      RebuildToken: !Ref StaticAssetRebuildToken
      RebuildMode: !Ref StaticAssetRebuildMode
      DevelopmentMode: !Ref DevelopmentMode
      FeedbackEnabled: !If [ EnableFeedbackSubmission, 'true', 'false' ]

  LambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

  CloudFrontSecurityHeadersLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/cloudfront-security
      Handler: replicator.handler
      MemorySize: 128
      Role: !GetAtt CloudFrontEdgeReplicatorRole.Arn
      Runtime: nodejs16.x
      Timeout: 300
      AutoPublishAlias: Live
      Environment:
        Variables:
          Bucket: !Ref ArtifactsS3BucketName
      Layers:
        - !Ref LambdaCommonLayer

  CloudFrontSecurityHeadersSetup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CloudFrontSecurityHeadersLambda.Arn
      Name: !Ref CloudFrontSecurityHeadersLambda
      RoleArn: !GetAtt LambdaEdgeFunctionRole.Arn
      RebuildToken: !Ref EdgeLambdaRebuildToken
  
  CloudFrontEdgeReplicatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionCode
              - lambda:PublishVersion
            Resource: arn:aws:lambda:*:*:*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: 'NotDevelopmentMode'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref 'AWS::StackName'

  CustomDomainCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: DevPortalSiteS3Bucket
    Condition: UseCustomDomainName
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref CustomDomainName
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: 'dev-portal-site-s3-bucket'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            -
              EventType: origin-response
              LambdaFunctionARN: !GetAtt CloudFrontSecurityHeadersSetup.EdgeArn
        DefaultRootObject: index.html
        Enabled: true
        Comment: !Sub '${AWS::StackName} distribution'
        Origins:
          - Id: 'dev-portal-site-s3-bucket'
            DomainName: !If ['InUSEastOne',
              !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3.amazonaws.com']],
              !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3-', !Ref 'AWS::Region', '.amazonaws.com']]]
            S3OriginConfig:
             OriginAccessIdentity: !Sub >-
               origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        ViewerCertificate:
          AcmCertificateArn: !Ref CustomDomainNameAcmCertArn
          SslSupportMethod: 'sni-only'

  DefaultCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: NoCustomDomainName
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: 'dev-portal-site-s3-bucket'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            -
              EventType: origin-response
              LambdaFunctionARN: !GetAtt CloudFrontSecurityHeadersSetup.EdgeArn
        DefaultRootObject: index.html
        Enabled: true
        Comment: !Sub '${AWS::StackName} distribution'
        Origins:
          - Id: 'dev-portal-site-s3-bucket'
            DomainName: !If ['InUSEastOne',
              !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3.amazonaws.com']],
              !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3-', !Ref 'AWS::Region', '.amazonaws.com']]]
            S3OriginConfig:
             OriginAccessIdentity: !Sub >-
               origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}

  CustomDomainDistributionAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: UseCustomDomainName
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${CustomDomainName}'

  CustomDomainHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: UseRoute53
    Properties:
      Name: !Join [ '', [ !Ref CustomDomainName, '.' ] ]

  CustomDomainRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseRoute53
    Properties:
      HostedZoneName: !Join [ '', [ !Ref CustomDomainName, '.' ] ]
      RecordSets:
        - Name: !Join [ '', [ !Ref CustomDomainName, '.' ] ]
          Type: A
          AliasTarget:
            DNSName: !Join [ '', [ !GetAtt CustomDomainCloudfrontDistribution.DomainName, '.' ] ]
            # this is a "magic string" for using CFN aliases; see this link:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
            HostedZoneId: 'Z2FDTNDATAQYW2'

  DumpV3AccountDataFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/dump-v3-account-data
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt DumpV3AccountDataExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 300
      Environment:
        Variables:
          CustomersTableName: !Ref DevPortalCustomersTableName
          UserPoolId: !Ref CognitoUserPool
          AdminsGroupName: !Ref CognitoAdminsGroup
      Layers:
        - !Ref LambdaCommonLayer

  DumpV3AccountDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: WriteCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ReadCustomersTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:Scan
            Resource: !GetAtt CustomersTable.Arn
      - PolicyName: ListUserPool
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:ListUsersInGroup
            Resource: !GetAtt CognitoUserPool.Arn

  UserGroupImporterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: WriteCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: S3GetObject
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:getObject
            Resource: arn:aws:s3:::*/*
      - PolicyName: RestoreTables
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:Scan
            Resource: !If [
              EnableFeedbackSubmission,
              [
                !GetAtt CustomersTable.Arn,
                !GetAtt FeedbackTable.Arn,
              ],
              [
                !GetAtt CustomersTable.Arn,
              ],
            ]
      - PolicyName: UpdateCognitoUserList
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminAddUserToGroup
            Resource: !GetAtt CognitoUserPool.Arn
  
  UserGroupImporter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/user-group-importer
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt UserGroupImporterExecutionRole.Arn
      Runtime: nodejs16.x
      # Use the default max timeout duration.
      Timeout: 900
      Environment:
        Variables:
          UserPoolId: !Ref CognitoUserPool
          AdminsGroup: !Ref CognitoAdminsGroup
          RegisteredGroup: !Ref CognitoRegisteredGroup
          CustomersTable: !Ref CustomersTable
          FeedbackTable: !If [EnableFeedbackSubmission, !Ref FeedbackTable, !Ref AWS::NoValue]
          SourceAccount: !Ref AWS::AccountId
      

Outputs:
  WebsiteURL:
    Value: !If [ 'DevelopmentMode',
      !Join [ '', [ 'https://', !GetAtt DevPortalSiteS3Bucket.RegionalDomainName, '/index.html' ]],
      !If [
        'UseCustomDomainName',
        !Join [ '', [ 'https://', !Ref CustomDomainName ]],
        !Join [ '', [ 'https://', !GetAtt DefaultCloudfrontDistribution.DomainName ]]
      ]
    ]
    Description: CloudFront URL for website

  CustomWebsiteURL:
    Condition: UseCustomDomainName
    Value: !Ref CustomDomainName
    Description: Custom URL for website
